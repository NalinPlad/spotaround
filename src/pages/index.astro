---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';

import words from '../words.json';
---

<Layout title="Welcome to Astro.">
	<main>	
		<div id="words"><div/>
	</main>
</Layout>

<style>

	#words {
		width: 50vw;
		cursor: pointer;
		/* display: grid;
		grid-template-columns: repeat(auto-fill, minmax(1rem, 1fr)); */
	}

	main {
		display: flex;
		justify-content: center;
		align-items: center;
		height: 100vh;
	
	}

	@keyframes bounce {
		0% {
			transform: translateY(0) scale(1);

		}
		100% {
			transform: translateY(-0.2rem) scale(1.1);
		}
	}

</style>

<script>
	const game_div = document.getElementById('words');
	// const words = ["hello", "world", "become", "amazing", "with", "despite"]
	import words_dict from '../words.json';

	let string =  words_dict.words[Math.floor(Math.random() * words_dict.words.length)].repeat(10);

	// cut off random amount from beginning and end of word

	string = string.slice(Math.floor(Math.random() * 5), string.length - Math.floor(Math.random() * 5));

	// split word into seperate spans
	string.split('').forEach((letter, i) => {
		const span = document.createElement('span');
		span.textContent = letter;
		span.style.animationDelay = `${i * 0.05}s`;
		span.style.color = `hsl(${Math.random() * 360}, 100%, 50%)`;
		span.style.fontWeight = 'bold';
		span.style.fontSize = '1.5rem';
		span.style.textShadow = '0 0 1rem white';
		span.style.display = 'inline-block';
		span.style.transform = `rotate(${Math.random() * 20 - 10}deg)`;
		span.style.margin = '0 1rem';
		span.style.transition = 'transform 0.5s';
		span.style.transitionTimingFunction = 'cubic-bezier(0.5, 1.6, 0.4, 0.9)';
		span.style.willChange = 'transform';

		span.style.animation = 'bounce 1s infinite alternate';
		span.style.animationDelay = `${i * 0.05}s`;
		span.style.animationTimingFunction = 'cubic-bezier(0.5, 1.6, 0.4, 0.9)';
		span.style.animationDirection = 'alternate';
		span.style.animationIterationCount = 'infinite';
		span.style.animationFillMode = 'both';
		span.style.animationPlayState = 'running';

		span.addEventListener('mouseover', () => {
			span.style.transform = `rotate(${Math.random() * 40 - 20}deg)`;
		});

		span.addEventListener('mouseout', () => {
			span.style.transform = `rotate(${Math.random() * 20 - 10}deg)`;
		});

		span.addEventListener('click', () => {
			span.style.transform = `rotate(${Math.random() * 40 - 20}deg)`;
		});

		span.addEventListener('animationiteration', () => {
			span.style.transform = `rotate(${Math.random() * 20 - 10}deg)`;
		});

		game_div.appendChild(span);
	});
</script>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
		/* font-size: ; */
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	/* h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	} */
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		padding: 1.5rem;
		border-radius: 8px;
	}
	.instructions code {
		font-size: 0.8em;
		font-weight: bold;
		background: rgba(var(--accent-light), 12%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}
</style>
